}
}
}
rankall <- function(outcome, num="best") {
## read outcome date
data <- read.csv("outcome-of-care-measures.csv",
na.string="Not Available")
names <- names(data)
## check that state and outcome are valid
matched <- match_outcome(outcome, names)
if (is.null(matched)) {
stop("invalid outcome")
}
## return the hospital name in the state with the lowest 30 day-death
## rate
ordered <- data[order(data[["State"]], data[[matched]],
data[["Hospital.Name"]]), ]
states <- as.character(unique(ordered[, "State"]))
ordered[["Rank"]] <- 0
k <- 1          ## index into the 4706 observations
for (i in 1:length(states)) {
ordered_subset <- subset(ordered, ordered$State==states[i])
for (j in 1:nrow(ordered_subset)) {
ordered[k, "Rank"] <- j
k <- k + 1
}
}
if (num == "best") {
hospitals <- as.character(ordered[ordered$Rank==1,
"Hospital.Name"])
return(data.frame(hospital=hospitals, state=states,
row.names=states))
} else if (num == "worst") {
hospitals <- character()
for (i in 1:length(states)) {
ordered_subset <- subset(ordered, ordered$State==
states[i])
num <- nrow(ordered_subset)
while (is.na(ordered_subset[num, matched])) {
num <- num - 1
}
hospital <- as.character(ordered[ordered$Rank==num &
ordered$State==states[i],
"Hospital.Name"])
hospitals <- c(hospitals, hospital)
}
return(data.frame(hospital=hospitals, state=states,
row.names=states))
} else {
hospitals <- character()
for (i in 1:length(states)) {
hospital <- as.character(ordered[ordered$Rank==num &
ordered$State==states[i],
"Hospital.Name"])
if (length(hospital)==0) {
hospital <- "<NA>"
}
hospitals <- c(hospitals, hospital)
}
return(data.frame(hospital=hospitals, state=states,
row.names=states))
}
}
tail(rankall("heart failure"), 10)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(twolet, outcome, num){
datas <- read.csv("outcome-of-care-measures.csv")
if (outcome == "heart attack")
param <- 11
else if (outcome == "heart failure")
param <- 17
else if (outcome == "pneumonia")
param <- 23
else print("invalid outcome")
divide <- split(datas, datas$State)
sort <- divide[[twolet]]
sort <- sort[ , c(2, param)]
if (num == "best")
out <- 1
else if (num == "worst")
out <- nrow(sort)
else if (num > nrow(sort))
stop("NA")
else out <- num
y <- sort[2] == "Not Available"
sort <- sort[!y, ]
sort <- sort[order(as.numeric(as.character(sort[, 2])), sort[, 1]), ]
print(tail(sort, 1))
sort[out, 1]
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
?str
library("swirl")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
file.path <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
file.path <- d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
?download.file
download.file(d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
file.path <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(file.path)
download.file(file.path, "data01.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf", "codebook.csv")
codebook <- read.csv("codebook.csv")
head(codebook)
file1 <- read.csv("data01.csv")
head(file1)
file1[, "val" = 24]
?subset
file2 <- file1[[, "val" = 24]]
file2 <- file1[[, "val"]]
file2 <- file1[, "val"]
file2 <- file1[, "VAL" = 24]
file2 <- file1[[, "VAL" = 24]]
file2 <- file1[, "VAL"]
head(file2)
file2
class(file2)
file2[file2 = 24]
file3 <- file2 = 24
file3 <- (file2 = 24)
file3
file2
file2 <- file1[, "VAL"]
class(file 2)
class(file2)
file2[24]
file2
which(file2 = 23)
?which
which(file2, 23)
s <- 0
for (i in seq(file2)) if (file2 = 24) s++
for (i in seq(file2)) if (file2 == 24) s++
for (i in seq(file2)) {if (file2 == 24) s <- s+1 }
s
for (i in length(file2)) {if (file2[i] == 24) s <- s+1 }
?howmany
?howmuch
?how.many
file2 > 23
file3 <- file2 > 23
sum(file3)
sum(file3, na.rm = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "gov.xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_201')
library("rJava")
library(xlsx)
install.packages("tidyverse")
library(readxl)
install.packages("readxl")
library(readxl)
file1 <- read_excel(gov.xlsx)
file1 <- read_excel("gov.xlsx")
file1 <- readxl_excel("gov.xlsx")
xlsx_example <- readxl_example("gov.xlsx")
getwd()
install.packages("readxl")
install.packages("readxl")
library(readxl)
file1 <- read_excel("gov.xlsx")
file1 <- read_excel(gov.xlsx)
path11 <- getwd()
file1 <- read_excel(path11/"gov.xlsx")
file1 <- read_excel("path11/gov.xlsx)
file1 <- read_excel("path11/gov.xlsx")
file1 <- read_excel("DATA.gov_NGAP.xlsx")
class(file1)
file2 <- file1[18:23, 7:15]
dat <- file1[18:23, 7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
dat
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "FUCK.xlsx")
file1 <- read_xlsx("FUCK.xlsx")
file1 <- read_xls("FUCK.xlsx")
file1 <- read_excel("FUCK.xlsx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "FUCK")
file1 <- read_excel("FUCK")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "FUCK", mode = "wb")
file1 <- read_excel("FUCK")
dat <- file1[18:23, 7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
dat
head(file1)
names(file1)
install.packages("XML")
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = TRUE)
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = TRUE)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc
names(doc)
doc <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useIn)
doc <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = T)
rootnode <- xmlRoot(doc)
xmlName(rootnode)
names(rootnode)
rootnode[[1]]
rootnode[[1]][[1]]
xpathApply(rootnode, "//zipcode")
xpathApply(rootnode, "//zipcode='21231'")
xpathApply(rootnode, "//zipcode='21231'", xmlValue)
sho <- xpathApply(rootnode, "//zipcode='21231'", xmlValue)
sho
sho <- xpathApply(rootnode, "//zipcode", xmlValue)
sho
rootnode[[1]][[1]]
sho <- xpathApply(rootnode, "//zipcode",)
sho
class(sho)
sho = "<zipcode>21231</zipcode> "
sho
sho <- xpathApply(rootnode, "//zipcode",)
sho
sho <- xpathApply(rootnode, "//zipcode", xmlValue)
sho
sho == "21231"
sum(sho == "21231")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", penis.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "penis.csv")
DT <- fread("penis.csv")
?fread
install.packages("data.table")
library(data.table)
DT <- fread("penis.csv")
dt
DT
?Sys.time
?system.time
system.time(tapply(DT$pwgtp15, DT$SEX, mean))
system.time(rowmeans(DT$pwgtp15, DT$SEX, mean))
system.time(rowMeans(DT)[DT$SEX == 1]; rowMeans(DT)[DT$SEX == 2])
system.time(rowMeans(DT)[DT$SEX == 1] rowMeans(DT)[DT$SEX == 2])
system.time(rowMeans(DT)[DT$SEX == 1]; rowMeans(DT)[DT$SEX == 2])
system.time(sapply(split(DT$pwgtp15, DT$SEX) mean))
system.time(sapply(split(DT$pwgtp15, DT$SEX), mean))
system.time(DT[, mean(pwgtp15), by = SEX]
)
install.packages("RMySQL")
ucs <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
install.packages(“RMySQL”, type = “source”)
install.packages('RMySQL', type = 'source')
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "password", dbname="db")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user", password = "password", dbname="db")
install.packages('RMySQL',type='source')
install.packages("RMySQL", type = "source")
R.Home()
R.home()
install.packages('RMySQL',type='source')
install.packages('RMySQL')
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "password", dbname="db")
?dbConnect
ucs <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucs, "show databases;"); dbDisconnect(ucs)
result
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
allTab <- dbListTables(hg19)
length(allTab)
allTab[1:5]
dbListFields(hg19, "affyU133Plus2")
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
install.packages("BiocManager")
biocLite("rhdf5")
Sys.which("make")
install.packages("jsonlite", type = "source")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("jsonlite", type = "source")
find.package("devtools")
library(devtools)
find_rtools()
pkgbuild::check_build_tools(debug = TRUE)
find_rtools(TRUE)
writeLines('PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"', con = "~/.Renviron")
find_rtools()
library(devtools)
find_rtools()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con ="~/.Renviron")
Sys.which("make")
options(buildtools.check=NULL)
find_rtools()
remotes::install_github("r-lib/pkgbuild")
remotes::install_github("r-lib/pkgbuild")
fing_rtools()
library(rtools)
Sys.which("make")
install.packages("jsonlite", type = "source")
library(devtools)
find_rtools(T)
Sys.which("make")
install.packages("jsonlite")
library(devtools)
find_rtools(T)
has_build_tools <- function(debug = FALSE) {
check <- getOption("buildtools.check", NULL)
if (!is.null(check)) {
if(is_windows() && is_R4() && has_rtools(debug = debug)){
TRUE
} else if (!is.null(check)) {
check("Building R package from source")
} else if (is_windows()) {
has_rtools(debug = debug)
has_build_tools <- function(debug = FALSE) {
check <- getOption("buildtools.check", NULL)
if (!is.null(check)) {
if(is_windows() && is_R4() && has_rtools(debug = debug)){
TRUE
} else if (!is.null(check)) {
check("Building R package from source")
} else if (is_windows()) {
has_rtools(debug = debug)
has_build_tools <- function(debug = FALSE) {
check <- getOption("buildtools.check", NULL)
if (!is.null(check)) {
if(is_windows() && is_R4() && has_rtools(debug = debug)){
TRUE
} else if (!is.null(check)) {
check("Building R package from source")
} else if (is_windows()) {
has_rtools(debug = debug)
}
has_build_tools <- function(debug = FALSE) {
check <- getOption("buildtools.check", NULL)
if (!is.null(check)) {
if(is_windows() && is_R4() && has_rtools(debug = debug)){
TRUE
} else if (!is.null(check)) {
check("Building R package from source")
} else if (is_windows()) {
has_rtools(debug = debug)
}
}
has_build_tools <- function(debug = FALSE) {
check <- getOption("buildtools.check", NULL)
if (!is.null(check)) {
if(is_windows() && is_R4() && has_rtools(debug = debug))
TRUE
else if (!is.null(check))
check("Building R package from source")
else if (is_windows())
has_rtools(debug = debug)
}
}
has_build_tools <- function(debug = FALSE) {
check <- getOption("buildtools.check", NULL)
if (!is.null(check)) {
if(is_windows() && is_R4() && has_rtools(debug = debug))
TRUE
else if (!is.null(check))
check("Building R package from source")
else if (is_windows())
has_rtools(debug = debug)
}
}
has_build_tools <- function(debug = FALSE) {
check <- getOption("buildtools.check", NULL)
if(is_windows() && is_R4() && has_rtools(debug = debug))
TRUE
else if (!is.null(check))
check("Building R package from source")
else if (is_windows())
has_rtools(debug = debug)
}
remotes::install_github("r-lib/pkgbuild")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
biocLite("rhdf5")
BiocManager::install("rhdf5")
BiocManager::install("rhdf5")
install.packages("devtools", type = "win.binary")
BiocManager::install("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
getwd()
swirl()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
?hist
ls()
str(position)
str(file1)
str(file2)
str(matr)
hist(matr)
matr
hist(matr$1)
hist(matr$1,1)
hist(matr$[,1])
names(matr)
names(matr) <- 1, 2, 3
names(matr) <- "1, 2, 3"
names(matr)
matr
names(matr) <- "1"
matr
names(matr) <- 1
matr
hist(matr$q)
hist(matr$1)
hist(matr[1:3])
hist(matr[1:3], breaks = 50, col = "green")
hist(matr[1:3], breaks = 500, col = "green")
hist(matr[1:6], breaks = 500, col = "green")
hist(matr[1:6], breaks = 5, col = "green")
#real frankenstein i swear guys
par(mfrow = c(2, 2))
epc <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", stringsAsFactors = FALSE)
epc2 <- epc[epc$Date %in% c("1/2/2007","2/2/2007") ,]
datetime <- strptime(paste(epc2$Date, epc2$Time, sep =" "), "%d/%m/%Y %H:%M:%S")
gap <- as.numeric(epc2$Global_active_power)
sub1 <- as.numeric(epc2$Sub_metering_1)
sub2 <- as.numeric(epc2$Sub_metering_2)
sub3 <- as.numeric(epc2$Sub_metering_3)
grp <- as.numeric(epc2$Global_reactive_power)
volt <- as.numeric(epc2$Voltage)
plot(datetime, gap, type="l", xlab="", ylab="Global Active Power")
plot(datetime, volt, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, sub1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, sub2, type="l", col="red")
lines(datetime, sub3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"))
plot(datetime, grp, type="l", xlab="datetime", ylab="Global_reactive_power")
getwd()
setwd("M:/code/ExData_Plotting1")
#real frankenstein i swear guys
par(mfrow = c(2, 2))
epc <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", stringsAsFactors = FALSE)
epc2 <- epc[epc$Date %in% c("1/2/2007","2/2/2007") ,]
datetime <- strptime(paste(epc2$Date, epc2$Time, sep =" "), "%d/%m/%Y %H:%M:%S")
gap <- as.numeric(epc2$Global_active_power)
sub1 <- as.numeric(epc2$Sub_metering_1)
sub2 <- as.numeric(epc2$Sub_metering_2)
sub3 <- as.numeric(epc2$Sub_metering_3)
grp <- as.numeric(epc2$Global_reactive_power)
volt <- as.numeric(epc2$Voltage)
plot(datetime, gap, type="l", xlab="", ylab="Global Active Power")
plot(datetime, volt, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, sub1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, sub2, type="l", col="red")
lines(datetime, sub3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"))
plot(datetime, grp, type="l", xlab="datetime", ylab="Global_reactive_power")
#real frankenstein i swear guys
par(mfrow = c(2, 2))
epc <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", stringsAsFactors = FALSE)
epc2 <- epc[epc$Date %in% c("1/2/2007","2/2/2007") ,]
datetime <- strptime(paste(epc2$Date, epc2$Time, sep =" "), "%d/%m/%Y %H:%M:%S")
gap <- as.numeric(epc2$Global_active_power)
sub1 <- as.numeric(epc2$Sub_metering_1)
sub2 <- as.numeric(epc2$Sub_metering_2)
sub3 <- as.numeric(epc2$Sub_metering_3)
grp <- as.numeric(epc2$Global_reactive_power)
volt <- as.numeric(epc2$Voltage)
plot(datetime, gap, type="l", xlab="", ylab="Global Active Power")
plot(datetime, volt, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, sub1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, sub2, type="l", col="red")
lines(datetime, sub3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"))
plot(datetime, grp, type="l", xlab="datetime", ylab="Global_reactive_power")
#real frankenstein i swear guys
par(mfrow = c(2, 2))
epc <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", stringsAsFactors = FALSE)
epc2 <- epc[epc$Date %in% c("1/2/2007","2/2/2007") ,]
datetime <- strptime(paste(epc2$Date, epc2$Time, sep =" "), "%d/%m/%Y %H:%M:%S")
gap <- as.numeric(epc2$Global_active_power)
sub1 <- as.numeric(epc2$Sub_metering_1)
sub2 <- as.numeric(epc2$Sub_metering_2)
sub3 <- as.numeric(epc2$Sub_metering_3)
grp <- as.numeric(epc2$Global_reactive_power)
volt <- as.numeric(epc2$Voltage)
plot(datetime, gap, type="l", xlab="", ylab="Global Active Power")
plot(datetime, volt, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, sub1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, sub2, type="l", col="red")
lines(datetime, sub3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"))
plot(datetime, grp, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.copy(png, file = "plot4.png")
dev.off()
